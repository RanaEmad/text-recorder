{"version":3,"sources":["components/TextRecorder/TextRecorder.js","App.js","serviceWorker.js","index.js"],"names":["TextRecorder","handleRecord","history","Date","getTime","state","text","setState","record","handleKeyUp","handleTextChange","e","target","value","handleStopRecording","stop","handlePlay","keys","Object","prevTimestamp","shift","time","forEach","timestamp","setTimeout","handleReset","controls","className","onClick","this","icon","faRecordVinyl","color","faStop","Fragment","faPlay","faRedo","rows","placeholder","onKeyUp","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6TA0HeA,G,wDA/Gb,aAAe,IAAD,8BACZ,gBASFC,aAAe,WACb,IAAIC,EAAU,GACdA,GAAQ,IAAIC,MAAOC,WAAa,EAAKC,MAAMC,KAC3C,EAAKC,SAAS,CACZL,UACAM,QAAQ,KAfE,EAmBdC,YAAc,WACZ,GAAI,EAAKJ,MAAMG,OAAQ,CACrB,IAAIN,EAAU,EAAKG,MAAMH,QACzBA,GAAQ,IAAIC,MAAOC,WAAa,EAAKC,MAAMC,KAC3C,EAAKC,SAAS,CACZL,cAxBQ,EA6BdQ,iBAAmB,SAACC,GAClB,EAAKJ,SAAS,CACZD,KAAMK,EAAEC,OAAOC,SA/BL,EAmCdC,oBAAsB,WACpB,EAAKP,SAAS,CACZC,QAAQ,EACRO,MAAM,KAtCI,EA0CdC,WAAa,WACX,EAAKT,SAAS,CACZD,KAAM,KAER,IAAIW,EAAOC,OAAOD,KAAK,EAAKZ,MAAMH,SAC9BiB,EAAgBF,EAAKG,QACrBC,EAAO,EACXJ,EAAKK,SAAQ,SAACC,GAEZC,YAAW,WACT,EAAKjB,SAAS,CAAED,KAAM,EAAKD,MAAMH,QAAQqB,OAF3CF,GAAQE,EAAYJ,GAIpBA,EAAgBI,MAtDN,EA0DdE,YAAc,WACZ,EAAKlB,SAAS,CACZL,QAAS,GACTI,KAAM,GACNE,QAAQ,EACRO,MAAM,KA7DR,EAAKV,MAAQ,CACXH,QAAS,GACTI,KAAM,GACNE,QAAQ,EACRO,MAAM,GANI,E,qDAoEZ,IAAIW,EACF,4BAAQC,UAAU,MAAMC,QAASC,KAAK5B,cACpC,kBAAC,IAAD,CAAiB6B,KAAMC,IAAeC,MAAM,YAD9C,WAuBF,OAnBIH,KAAKxB,MAAMG,SACbkB,EACE,4BAAQC,UAAU,MAAMC,QAASC,KAAKf,qBACpC,kBAAC,IAAD,CAAiBgB,KAAMG,IAAQD,MAAM,YADvC,oBAKAH,KAAKxB,MAAMU,OACbW,EACE,kBAAC,IAAMQ,SAAP,KACE,4BAAQP,UAAU,MAAMC,QAASC,KAAKb,YACpC,kBAAC,IAAD,CAAiBc,KAAMK,IAAQH,MAAM,YADvC,SAGA,4BAAQL,UAAU,MAAMC,QAASC,KAAKJ,aACpC,kBAAC,IAAD,CAAiBK,KAAMM,IAAQJ,MAAM,YADvC,YAOJ,yBAAKL,UAAU,iBACb,wBAAIA,UAAU,UAAd,iBACA,8BACEA,UAAU,OACVU,KAAK,KACLC,YAAY,mCACZC,QAASV,KAAKpB,YACd+B,SAAUX,KAAKnB,iBACfG,MAAOgB,KAAKxB,MAAMC,OAEpB,yBAAKqB,UAAU,YACZD,Q,GAzGgBe,IAAMC,YCElBC,MARf,WACE,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,QCKciB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bca13e06.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faRecordVinyl,\n  faStop,\n  faPlay,\n  faRedo,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport \"./TextRecorder.css\";\n\nclass TextRecorder extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      history: {},\n      text: \"\",\n      record: false,\n      stop: false,\n    };\n  }\n\n  handleRecord = () => {\n    let history = {};\n    history[new Date().getTime()] = this.state.text;\n    this.setState({\n      history,\n      record: true,\n    });\n  };\n\n  handleKeyUp = () => {\n    if (this.state.record) {\n      let history = this.state.history;\n      history[new Date().getTime()] = this.state.text;\n      this.setState({\n        history,\n      });\n    }\n  };\n\n  handleTextChange = (e) => {\n    this.setState({\n      text: e.target.value,\n    });\n  };\n\n  handleStopRecording = () => {\n    this.setState({\n      record: false,\n      stop: true,\n    });\n  };\n\n  handlePlay = () => {\n    this.setState({\n      text: \"\",\n    });\n    let keys = Object.keys(this.state.history);\n    let prevTimestamp = keys.shift();\n    let time = 0;\n    keys.forEach((timestamp) => {\n      time += timestamp - prevTimestamp;\n      setTimeout(() => {\n        this.setState({ text: this.state.history[timestamp] });\n      }, time);\n      prevTimestamp = timestamp;\n    });\n  };\n\n  handleReset = () => {\n    this.setState({\n      history: {},\n      text: \"\",\n      record: false,\n      stop: false,\n    });\n  };\n\n  render() {\n    let controls = (\n      <button className=\"btn\" onClick={this.handleRecord}>\n        <FontAwesomeIcon icon={faRecordVinyl} color=\"#c51818\" /> Record\n      </button>\n    );\n    if (this.state.record) {\n      controls = (\n        <button className=\"btn\" onClick={this.handleStopRecording}>\n          <FontAwesomeIcon icon={faStop} color=\"#c51818\" /> Stop Recording\n        </button>\n      );\n    }\n    if (this.state.stop) {\n      controls = (\n        <React.Fragment>\n          <button className=\"btn\" onClick={this.handlePlay}>\n            <FontAwesomeIcon icon={faPlay} color=\"#c51818\" /> Play\n          </button>\n          <button className=\"btn\" onClick={this.handleReset}>\n            <FontAwesomeIcon icon={faRedo} color=\"#c51818\" /> Reset\n          </button>\n        </React.Fragment>\n      );\n    }\n    return (\n      <div className=\"text-recorder\">\n        <h1 className=\"header\">Text Recorder</h1>\n        <textarea\n          className=\"text\"\n          rows=\"10\"\n          placeholder=\"Press Record and start typing...\"\n          onKeyUp={this.handleKeyUp}\n          onChange={this.handleTextChange}\n          value={this.state.text}\n        ></textarea>\n        <div className=\"controls\">\n          {controls}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TextRecorder;\n","import React from \"react\";\nimport \"./App.css\";\nimport TextRecorder from \"./components/TextRecorder/TextRecorder\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <TextRecorder />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}